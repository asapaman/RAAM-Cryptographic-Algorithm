def raam_dec(path, key):
    print(key)
    fin = open(path, 'rb')
        # storing image data in variable "image"
    image = fin.read()
    fin.close()
    path = path.split('/')[-1]

    # converting image into byte array to
    # perform encryption easily on numeric data
    image = bytearray(image)
    print("initial image data : ",image)
    imagedata = []
    for index, values in enumerate(image):
        imagedata =imagedata + [values]


    print("initial image values : ",imagedata)

    remainder = (len(imagedata) + 64) % len(key)

    count = 0

    sendtext = []

    # +++++++++++++++++++++++++++++++ Key Generation ++++++++++++++++++++++++


    test_str = key
    binary = ''

    res = ''.join(format(ord(i), '07b') for i in test_str)
    print(len(res))
    ns = ''
# rearranging the binary of original string to get another value;
    for i in range(7):
        for j in range(len(res) // 7):
            ns = ns + res[j * 7 + i]
    print("\n===============================================================")

# appending the rearranged bits to the binary of original string
    res = res + ns
    ns = ''

# rearranging the original + rearranged appended bits
    for i in range(7):
        for j in range(len(res) // 7):
            ns = ns + res[j * 7 + i]
# Again appending the above bits to the earlier appended + original bits
    res = res + ns
    print("\n===============================================================")
    ns = res



# converting binary into char and storing it in string_data variable
# and printing binary value followed by its char value here all 4 key are joind
# in a single string so we will have to seperate it in next step.
    string_data = ""
    for i in range(0, len(ns), 7):
        temp_bin = ns[i:i + 7]
        string_data = string_data + chr(int(temp_bin, 2))


    key_matrix = []  # it will store the all 10 key value
    key1 = string_data
    length = len(test_str)

# this will seperate the 4 key from single string and store it in 'key_matrix';
    for i in range(4):
        keychunk = key1[i * length:(i + 1) * length]
        key_matrix.append(keychunk)

# now other 4 key will be generated by adding last half of previous key and
# first half of next key
    counter = length // 2
    for i in range(3):
        key = key1[counter:counter + length]
        key_matrix.append(key)
        counter = counter + length
    key8 = key1[counter:] + key1[:length // 2]  # 8th key is generated by adding last half
# of 4th key with first half of first key

    key_matrix.append(key8)

# now other two matrix will be generated by adding 1/4th of each of first 4 key
    z = length // 4
    last = length - (3 * z)
    key9 = key_matrix[0][-z:] + key_matrix[1][-z:] + key_matrix[2][-z:] + key_matrix[3][-last:]
    key10 = key_matrix[0][:z] + key_matrix[1][:z] + key_matrix[2][:z] + key_matrix[3][:last]
    key_matrix.append(key9)
    key_matrix.append(key10)

    print(key_matrix)

# +++++++++++++++++++++++++ End Of Key Generation Function ++++++++++++++++++++++++
    def decrypt(text, key):
        for D in range(10):
            matrix = []
            q = len(text) // len(key)  # quatent
            for i in range(q):
                str1 = []
            # read every jth char from encrypted text which will
            # result original row which was encrypted
                for j in range(len(key)):
                    str1.append((text[j * q + i]) ^ ord(key_matrix[9-D][j]))
                matrix.append(str1)

            text = []
            for k in range(q):
                text.extend(matrix[k])
            print("Matrix No : ", D + 1, " is generated")

        text = text[32:-32]
        if (text[-1]==ord('Z')):
            text = text[:-1]
        if (text[-1]==ord('Z')):
            text = text[:-1]
        elif (text[-1]+text[-2] <= 18):
            if (text[-3]==ord('Z')):
                text = text[:-3]+text[-2:]
            text = text[:-2]
        print("plain text: ", text)
        text = bytearray(text)
        print("binary text: ", text)
        #global path
        name = 'decrypt_' + path
        fin = open(name, 'wb')
        # writing encrypted data in image
        fin.write(text)
        fin.close()
        print("Decrypted and seved as : ", name)


    decrypt(imagedata, key)
    #input()